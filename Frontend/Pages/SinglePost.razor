@page "/post/{postId}"
@using Frontend.Models.Posts
@using Frontend.Services.Posts
@using Frontend.Models.Comments
@using Frontend.Services.comments
@inject IPostInterface _postInterface
@inject ICommentInterface _commentInterface
@* @inject IUserInterface _userInterface *@
@inject IAuthInterface _authInterface
@inject NavigationManager NavigationManager
@* @using Frontend.Services.Users *@
@using System.Linq

<div class="container mx-auto py-5">
    <div class="card mx-auto" style="max-width: 48rem;">
      
        <div class="card-body">
            <h2 class="card-title h2">@post.Title</h2>
            <img src="@post.ImageUrl" alt="Post Image" class="w-100 h-100 object-cover rounded-lg mb-4">
            <p class="text-gray-600 leading-relaxed mb-4">@post.Content</p>
            @* <p class="img">@post.ImageUrl</p> *@
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="d-flex align-items-center">
                    @* <img src="https://cdn.pixabay.com/photo/2013/07/13/10/44/man-157699_640.png" alt="User Avatar" class="w-12 h-12 rounded-full me-4"> *@
                    <div>
                        @* @foreach (var user in users) *@
                        @* {
                            if (user.Id == Guid.Parse(post.UserId))
                            {
                                <p class="text-gray-700 font-weight-bold">@user.UserName</p>
                            }
                        } *@
                        <p class="text-gray-500 small">@post.CreatedAt.ToString("MMMM dd, yyyy")</p>
                    </div>
                </div>
                <div class="d-flex gap-3">
                    <button @onclick="(()=>EditPost(post.Id))" class="btn btn-primary">
                        Edit
                    </button>
                    <button @onclick="(()=>deletePost(post.Id))"  class="btn btn-danger">
                        Delete
                    </button>
                </div>
            </div>
        </div>

        <div class="card-body border-top border-gray-300">
            <h3 class="card-title h2">Comments</h3>

            <div class="mt-4 d-flex align-items-center">
                <input type="text" class="form-control" placeholder="Add a comment..." @bind="comment.Content" />
                <button @onclick="(()=>addComment(post.Id))" class="btn btn-primary ms-2">Add</button>
            </div>

            @if (post.Comments.Count() == 0)
            {
                <p class="text-gray-600 leading-relaxed">No comments</p>
            }
            else
            {
                @foreach (var comment in post.Comments)
                {
                    <div class="mb-4">
                        <div class="d-flex align-items-center">
                            @* <img src="https://cdn.pixabay.com/photo/2013/07/13/10/44/man-157699_640.png" alt="User Avatar" class="w-10 h-10 rounded-full me-4"> *@
                            <div>
                                @* @foreach (var user in users)
                                {
                                    if (user.Id == Guid.Parse(comment.UserId))
                                    {
                                        <p class="text-gray-700 font-weight-bold">@user.UserName</p>
                                    }
                                } *@
                                <p class="text-gray-600 leading-relaxed">@comment.content</p>
                                <div class="d-flex align-items-center mt-2">
                                    <button class="btn btn-danger">
                                        X
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private PostDto post { get; set; } = new PostDto();
    @* private List<UserDto> users = new List<UserDto>(); *@
    [Parameter]
    public string postId { get; set; }
    public CommentRequestDto comment = new CommentRequestDto();
      private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
         comment = new CommentRequestDto();
        post = await _postInterface.GetPostByIdAsync(Guid.Parse(postId));
        @* users = await _userInterface.GetAllUsersAsync(); *@
        Console.WriteLine(post);
    }

    public async Task deletePost(Guid postId)
    {
        await _postInterface.DeletePostAsync(postId);
    }

    public void EditPost(Guid postId)
    {
        NavigationManager.NavigateTo($"/createpost/{postId}");
    }

  public async Task addComment(Guid id)
{
    if (!string.IsNullOrWhiteSpace(comment.Content)) 
    {
        comment.PostId = id;
        try
        {
            var res = await _commentInterface.AddCommentAsync(comment);

            if (res != null && res.IsSuccess)
            {
               
                post = await _postInterface.GetPostByIdAsync(id);
                comment = new CommentRequestDto();
            }
            else
            {
                errorMessage = "Failed to add the comment. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while adding the comment. Please try again later.";
        }
    }
}


}
