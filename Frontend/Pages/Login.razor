@page "/login"
@inject IAuthInterface authInterface
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navigationManager
<div class="row mt-10">
    <div class="col-6">
        <img class="h-100 w-100" src="https://cdn.pixabay.com/photo/2014/11/21/03/27/quairaing-540122_640.jpg" />
    </div>

    <div class="col-6">
        <h1> Login User</h1>
        <EditForm Model="@user" OnValidSubmit="loginUser">
            <DataAnnotationsValidator />

            <div class="form-group p-2">
                <label for="name">Username</label>
                <InputText type="email" class="form-control p-2" id="email" @bind-Value="@user.Username" aria-describedby="name" />
                <ValidationMessage For="@(()=>user.Username)" />
            </div>

            <div class="form-group p-2">
                <label for="password">Password</label>
                <InputText type="text" class="form-control p-2" id="password" @bind-Value="@user.Password" aria-describedby="name" />
                <ValidationMessage For="@(()=>user.Password)" />
            </div>
            <div class="flex-row m-2" p-2>
                <button type="submit" style="width:100px" class=" p-2 m-1 btn btn-primary">Submit</button>
                <button type="button" style="width:100px" class="p-2 btn btn-secondary">Reset</button>
            </div>
            <div class="row">
                <p class="col-4">Not a member? <a class="col-1" href="register">Register</a></p>

            </div>
        </EditForm>

    </div>
</div>

@code {
    private LoginRequestDto user = new LoginRequestDto();

    private async Task loginUser()
    {
        var res = await authInterface.Login(user);
        Console.WriteLine(res.Token);

        if (!string.IsNullOrWhiteSpace(res.Token))
        {
            await localStorage.SetItemAsStringAsync("authToken", res.Token);
            await authProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("");
        }


    }

}